public class Account {

    // instantiate private Account class variables
    private static int lastId = 999;
    private int id;
    private String handle;
    private String descriptionField;

    // constructors

    /**
     * Constructor to create account with a handle
     * @param handle
     */
    public Account(String handle) {
        this.id = ++Account.lastId; // create new account ID
        setHandle(handle);
    }

    /**
     * Constructor to create account with all information, i.e. id, handle and description field
     * @param handle
     * @param descriptionField
     */
    public Account(String handle, String descriptionField){
        ++Account.lastId; // create new account ID
        this.handle = handle;
        setDescriptionField(descriptionField);
    }

    // methods to check validity
    
    /**
     * Method to check if the account handle associated with the post is valid.
     * Handle is valid if it is not black and is less than or equal to 30 characters.
     * @param str
     * @return true if the handle is valid, false if not
     */
    private boolean isValidString(String str) {
        if (str != null && !str.isBlank() || str.length() < 30 || !str.contains(" ")) {
            return true;
        } else {
            System.err.printf("%s - is not a valid string to use", str);
            return false;
        }
    }
    
    // Setter methods

    /** 
     * Setter method for handle
     * @param handle to set
     */
    public void setHandle(String handle) {
        if (isValidString(handle)) {
            this.handle = handle;
        } else {
            System.exit(1);
        }
    }

    /**
     * Setter method for description field
     * @param descriptionField
     */
    public void setDescriptionField(String descriptionField){
        this.descriptionField = descriptionField;
    }

    // getter methods

    /**
     * Getter method for account ID
     * @return id
     */
    public int getId() {
        return this.id;
    }

    /**
     * Getter method for account handle
     * @return handle
     */
    public String getHandle() {
        return this.handle;
    }

    /**
     * Getter method for account description
     * @return descriptionField
     */
    public String getDescriptionField() {
        return this.descriptionField;
    }

    // toString() method
    /**
     * The method generates a formatted string containing details of a single account
     * @return account in string format
     */
    public String toString() {
        return "ID: " + id +"/nHandle: " + handle + "/nDescription: " + descriptionField;
    }

}
